source("munging.R")
source("R/munging.R")
df = jsonlite::fromJSON("fall2019-survey-M02.json")
dfBinnedData = getBinnedData(df)
dfTnx = as(dfBinnedData, "transactions")
##### association rules #####
rulesetPromoters <- apriori(dfTnx,
parameter=list(support=0.005,confidence=0.5),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Promoter")))
rulesetDetractors <- apriori(dfTnx,
parameter=list(support=0.05,confidence=0.8),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Detractor")))
length(rulesetPromoters[quality(rulesetPromoters)$lift > 2.35])
length(rulesetDetractors[quality(rulesetDetractors)$lift > 1.99])
##### classification models for all data #####
analysisColumns = c("Airline.Status", "Type.of.Travel", "Eating.and.Drinking.at.Airport", "Departure.Delay.in.Minutes", "Flights.Per.Year", "Price.Sensitivity", "olong", "dlat", "Total.Freq.Flyer.Accts")
analysisData = dfBinnedData[, names(dfBinnedData) %in% c(analysisColumns, "Likelihood.to.recommend") ]
analysisData$Likelihood.to.recommend[is.na(analysisData$Likelihood.to.recommend)] = "Passive"
analysisData = prepareForAnalysis(analysisData, analysisColumns)
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
set.seed(1)
inTraining = createDataPartition(analysisData$Likelihood.to.recommend, p = 0.75, list = FALSE)
trainData = analysisData[inTraining,]
testData = analysisData[-inTraining,]
logitBoost <- train(factor(Likelihood.to.recommend) ~., data = trainData, method = "LogitBoost", trControl=fitControl, preProcess = c("center", "scale"), tuneLength = 10)
logitBoost
result = predict(logitBoost, testData)
F1_Score(testData$Likelihood.to.recommend, result)
personalTravel = df[str_trim(df$Type.of.Travel) == "Personal Travel", names(df) != "Type.of.Travel"]
personalTravelBinned = getBinnedData(personalTravel)
personalTravelTnx = as(personalTravelBinned, "transactions")
##### classification models for Personal Travel data #####
analysisColumns1 = c("Airline.Status", "olong", "olat",  "Age", "Gender", "Price.Sensitivity", "Flight.Distance",
"Eating.and.Drinking.at.Airport", "Flights.Per.Year","Origin.State", "Total.Freq.Flyer.Accts")
analysisData1 = personalTravelBinned[, names(personalTravelBinned) %in% c(analysisColumns1, "Likelihood.to.recommend") ]
analysisData1 = prepareForAnalysis(analysisData1, analysisColumns1)
inTraining1 = createDataPartition(analysisData1$Likelihood.to.recommend, p = .75, list = FALSE)
trainData1 = analysisData1[inTraining1,]
testData1 = analysisData1[-inTraining1,]
logitBoost1 <- train(factor(Likelihood.to.recommend) ~., data = trainData1, method = "LogitBoost", trControl=fitControl, preProcess = c("center", "scale"), tuneLength = 10)
logitBoost1
result1 = predict(logitBoost1, newdata = testData1)
sum(result1 == testData1$Likelihood.to.recommend)/length(testData1$Likelihood.to.recommend)
F1_Score(testData1$Likelihood.to.recommend, result1)
# Removing unimportant data
analysisData2 = personalTravelBinned[, names(personalTravelBinned) %in% c(analysisColumns1, "Likelihood.to.recommend") ]
analysisData2 = analysisData2[analysisData2$Eating.and.Drinking.at.Airport != ">400",]
analysisData2$Eating.and.Drinking.at.Airport = as.factor(as.character(analysisData2$Eating.and.Drinking.at.Airport))
analysisData2 = analysisData2[!analysisData2$Origin.State %in% c("Maine", "Idaho", "Mississippi", "New Jersey"),]
analysisData2$Origin.State = as.factor(as.character(analysisData2$Origin.State))
analysisData2 = analysisData2[as.numeric(analysisData2$Total.Freq.Flyer.Accts) < 7,]
analysisData2$Total.Freq.Flyer.Accts = as.factor(as.character(analysisData2$Total.Freq.Flyer.Accts))
analysisData2 = prepareForAnalysis(analysisData2, analysisColumns1)
set.seed(1)
inTraining2 = createDataPartition(analysisData2$Likelihood.to.recommend, p = .75, list = FALSE)
trainData2 = analysisData2[inTraining2,]
testData2 = analysisData2[-inTraining2,]
logitBoost2 <- train(factor(Likelihood.to.recommend) ~., data = trainData2, method = "LogitBoost", trControl=fitControl, preProcess = c("center", "scale"), tuneLength = 10)
logitBoost2
result2 = predict(logitBoost2, newdata = testData2)
sum(result2 == testData2$Likelihood.to.recommend)/length(testData2$Likelihood.to.recommend)
F1_Score(testData2$Likelihood.to.recommend, result2)
varImp(logitBoost2)
personalBlue = df[str_trim(df$Type.of.Travel) == "Personal Travel" & str_trim(df$Airline.Status) == "Blue", !names(df) %in% c("Type.of.Travel", "Airline.Status")]
personalBlueBinned = getBinnedData(personalBlue)
personalBlueTnx = as(personalBlueBinned, "transactions")
##### classification models for Personal Travel, Blue data #####
analysisColumns1 = c("Age", "Gender", "Flight.Distance", "Eating.and.Drinking.at.Airport",
"olong", "Arrival.Delay.in.Minutes", "Loyalty", "Total.Freq.Flyer.Accts")
analysisData1 = personalBlueBinned[, names(personalBlueBinned) %in% c(analysisColumns1, "Likelihood.to.recommend")]
analysisData1 = prepareForAnalysis(analysisData1, analysisColumns1)
set.seed(1)
inTraining1 = createDataPartition(analysisData1$Likelihood.to.recommend, p = .75, list = FALSE)
trainData1 = analysisData1[inTraining1,]
testData1 = analysisData1[-inTraining1,]
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
logitBoost1 <- train(factor(Likelihood.to.recommend) ~., data = trainData1, method = "LogitBoost", trControl=fitControl, preProcess = c("center", "scale"), tuneLength = 10)
logitBoost1
result5 = predict(logitBoost1, newdata = testData1)
sum(result5 == testData1$Likelihood.to.recommend)/length(testData1$Likelihood.to.recommend)
F1_Score(testData1$Likelihood.to.recommend, result5)
varImp(logitBoost1)
svmRadial1 <- train(factor(Likelihood.to.recommend) ~., data = trainData1, method = "svmRadial", trControl=fitControl, preProcess = c("center", "scale"), tuneLength = 10)
svmRadial1
result6 = predict(svmRadial1, newdata = testData1)
sum(result6 == testData1$Likelihood.to.recommend)/length(testData1$Likelihood.to.recommend)
F1_Score(testData1$Likelihood.to.recommend, result6)
varImp(svmRadial1)
rulesetPromoters <- apriori(personalBlueTnx,
parameter=list(support=0.002,confidence=0.5),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Promoter")))
rulesetDetractors <- apriori(personalBlueTnx,
parameter=list(support=0.05,confidence=0.8),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Detractor")))
arules::inspect(rulesetPromoters[quality(rulesetPromoters)$lift > 28])
arules::inspect(rulesetDetractors[quality(rulesetDetractors)$lift > 1.11])
length(rulesetPromoters[quality(rulesetPromoters)$lift > 28])
length(rulesetPromoters[quality(rulesetPromoters)$lift > 30])
summary(quality(rulesetPromoters)$lift)
length(rulesetPromoters[quality(rulesetPromoters)$lift > 41])
length(rulesetPromoters[quality(rulesetPromoters)$lift > 35])
arules::inspect(rulesetPromoters[quality(rulesetPromoters)$lift > 35])
arules::inspect(rulesetDetractors[quality(rulesetDetractors)$lift > 1.11])
length(personalBlue$Likelihood.to.recommend = "Detractor")/legnth(personalBlue$Likelihood.to.recommend)
length(personalBlue$Likelihood.to.recommend =- "Detractor")/legnth(personalBlue$Likelihood.to.recommend)
length(personalBlue$Likelihood.to.recommend == "Detractor")/legnth(personalBlue$Likelihood.to.recommend)
length(personalBlue$Likelihood.to.recommend == "Detractor")/length(personalBlue$Likelihood.to.recommend)
length(personalBlue$Likelihood.to.recommend == "Detractor")
length(personalBlue$Likelihood.to.recommend)
hist(personalBlue$Likelihood.to.recommend == "Detractor")
hist(personalBlue$Likelihood.to.recommend)
length(personalBlue$Likelihood.to.recommend == "Promoter")
sum(personalBlue$Likelihood.to.recommend == "Promoter")
sum(personalBlue$Likelihood.to.recommend == "Detractor")
sum(personalBlueBinned$Likelihood.to.recommend == "Detractor")/length(personalBlueBinned$Likelihood.to.recommend)
RMSPE(testData1$Likelihood.to.recommend, result6)
plotLTR = function(data, colName) {
aggregateData = tapply(data$Likelihood.to.recommend, data[, colnames(data) == colName], mean)
aggregateDf = data.frame(temp = names(aggregateData), avgLTR = aggregateData)
ggplot(aggregateDf, aes(x = temp, y = avgLTR)) + labs(y = "Average LTR", x = colName) + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
}
########## TypeOfTravel ##########
dfTypeOfTravelTable = tapply(df$Likelihood.to.recommend, df$Type.of.Travel, mean)
dfTypeOfTravel = data.frame(typeOfTravel = names(dfTypeOfTravelTable), avgLTR = dfTypeOfTravelTable)
ggplot(dfTypeOfTravel, aes(x = typeOfTravel, y = avgLTR)) + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(dfTypeOfTravel, aes(x = typeOfTravel, y = avgLTR))+ labs(y = "Average LTR", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(dfTypeOfTravel, aes(x = typeOfTravel, y = avgLTR))+ labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(dfTypeOfTravel, aes(x = typeOfTravel, y = avgLTR)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + abline(6)
abline(6)
ggplot(dfTypeOfTravel, aes(x = typeOfTravel, y = avgLTR)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + plot(dfTypeOfTravel$typeOfTravel, 6)
ggplot(dfTypeOfTravel, aes(x = typeOfTravel, y = avgLTR)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(6)
ggplot(dfTypeOfTravel, aes(x = typeOfTravel, y = avgLTR)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(yintercept =6)
ggplot(dfTypeOfTravel, aes(x = typeOfTravel, y = avgLTR)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = 6, color = "Red"))
ggplot(dfTypeOfTravel, aes(x = typeOfTravel, y = avgLTR)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = 6, color = "red"))
ggplot(dfTypeOfTravel, aes(x = typeOfTravel, y = avgLTR)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = 6, color = "white"))
ggplot(dfTypeOfTravel, aes(x = typeOfTravel, y = avgLTR)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = 6, fill = "red"))
##### classification models for Personal Travel data #####
analysisColumns3 = colnames(personalTravelBinned)[colnames(personalTravelBinned) != "Likelihood.to.recommend"]
analysisData3 = personalTravelBinned[, names(personalTravelBinned) %in% c(analysisColumns3, "Likelihood.to.recommend") ]
analysisData3 = prepareForAnalysis(analysisData3, analysisColumns3)
set.seed(1)
inTraining1 = createDataPartition(analysisData1$Likelihood.to.recommend, p = .75, list = FALSE)
inTraining1 = createDataPartition(analysisData3$Likelihood.to.recommend, p = .75, list = FALSE)
inTraining3 = createDataPartition(analysisData3$Likelihood.to.recommend, p = .75, list = FALSE)
trainData3 = analysisData3[inTraining3,]
testData3 = analysisData3[-inTraining3,]
logitBoost3 <- train(factor(Likelihood.to.recommend) ~., data = trainData3, method = "LogitBoost", trControl=fitControl, preProcess = c("center", "scale"), tuneLength = 10)
logitBoost3
resultX = predict(logitBoost3, newdata = testData3)
sum(resultX == testData3$Likelihood.to.recommend)/length(testData3$Likelihood.to.recommend)
F1_Score(testData3$Likelihood.to.recommend, resultX)
varImp(logitBoost1)
sum(personalTravelBinned$Likelihood.to.recommend == "Detractor")/length(personalTravelBinned$Likelihood.to.recommend)
##### classification models for all data #####
analysisColumns = c("Airline.Status", "Type.of.Travel", "Eating.and.Drinking.at.Airport", "Departure.Delay.in.Minutes", "Flights.Per.Year", "Price.Sensitivity", "olong", "dlat", "Total.Freq.Flyer.Accts")
analysisData = dfBinnedData[, names(dfBinnedData) %in% c(analysisColumns, "Likelihood.to.recommend") ]
##### classification models for all data #####
#analysisColumns = c("Airline.Status", "Type.of.Travel", "Eating.and.Drinking.at.Airport", "Departure.Delay.in.Minutes", "Flights.Per.Year", "Price.Sensitivity", "olong", "dlat", "Total.Freq.Flyer.Accts")
analysisColumns = colnames(dfBinnedData)[colnames(dfBinnedData) != "Likelihood.to.recommend"]
analysisData = dfBinnedData[, names(dfBinnedData) %in% c(analysisColumns, "Likelihood.to.recommend") ]
analysisData$Likelihood.to.recommend[is.na(analysisData$Likelihood.to.recommend)] = "Passive"
analysisData = prepareForAnalysis(analysisData, analysisColumns)
set.seed(1)
inTraining = createDataPartition(analysisData$Likelihood.to.recommend, p = 0.75, list = FALSE)
trainData = analysisData[inTraining,]
testData = analysisData[-inTraining,]
logitBoost <- train(factor(Likelihood.to.recommend) ~., data = trainData, method = "LogitBoost", trControl=fitControl, preProcess = c("center", "scale"), tuneLength = 10)
logitBoost
result = predict(logitBoost, testData)
F1_Score(testData$Likelihood.to.recommend, result)
sum(resultX == testData3$Likelihood.to.recommend)/length(testData3$Likelihood.to.recommend)
varImp(logitBoost)
sum(dfBinnedData$Likelihood.to.recommend == "Detractor")/length(dfBinnedData$Likelihood.to.recommend)
personalTravel = df[str_trim(df$Type.of.Travel) == "Personal Travel", names(df) != "Type.of.Travel"]
personalTravelBinned = getBinnedData(personalTravel)
personalTravelTnx = as(personalTravelBinned, "transactions")
rulesetPromoters <- apriori(personalTravelTnx,
parameter=list(support=0.005,confidence=0.5),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Promoter")))
rulesetDetractors <- apriori(personalTravelTnx,
parameter=list(support=0.05,confidence=0.8),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Detractor")))
arules::inspect(rulesetPromoters)
arules::inspect(rulesetDetractors[quality(rulesetDetractors)$lift > 1.178])
analysisColumns1 = c("Airline.Status", "olong", "olat",  "Age", "Gender", "Price.Sensitivity", "Flight.Distance",
"Eating.and.Drinking.at.Airport", "Flights.Per.Year","Origin.State", "Total.Freq.Flyer.Accts")
analysisData1 = personalTravelBinned[, names(personalTravelBinned) %in% c(analysisColumns1, "Likelihood.to.recommend") ]
analysisData1 = prepareForAnalysis(analysisData1, analysisColumns1)
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
set.seed(1)
inTraining1 = createDataPartition(analysisData1$Likelihood.to.recommend, p = .75, list = FALSE)
trainData1 = analysisData1[inTraining1,]
testData1 = analysisData1[-inTraining1,]
logitBoost1 <- train(factor(Likelihood.to.recommend) ~., data = trainData1, method = "LogitBoost", trControl=fitControl, preProcess = c("center", "scale"), tuneLength = 10)
logitBoost1
result1 = predict(logitBoost1, newdata = testData1)
sum(result1 == testData1$Likelihood.to.recommend)/length(testData1$Likelihood.to.recommend)
personalBlue = df[str_trim(df$Type.of.Travel) == "Personal Travel" & str_trim(df$Airline.Status) == "Blue", !names(df) %in% c("Type.of.Travel", "Airline.Status")]
personalBlueBinned = getBinnedData(personalBlue)
personalBlueTnx = as(personalBlueBinned, "transactions")
rulesetPromoters <- apriori(personalBlueTnx,
parameter=list(support=0.002,confidence=0.5),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Promoter")))
rulesetDetractors <- apriori(personalBlueTnx,
parameter=list(support=0.05,confidence=0.8),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Detractor")))
arules::inspect(rulesetPromoters[quality(rulesetPromoters)$lift > 35])
arules::inspect(rulesetDetractors[quality(rulesetDetractors)$lift > 1.11])
View(svmRadial1)
dfPersonalTravel = df[df$Type.of.Travel == "Personal Travel",]
dfPersonalTravelBlueTable = tapply(dfPersonalTravel$Likelihood.to.recommend, dfPersonalTravel$Airline.Status, mean)
dfPersonalTravelBlue = data.frame(typeOfTravel = names(dfPersonalTravelBlueTable), avgLTR = dfPersonalTravelBlueTable)
ggplot(dfPersonalTravelBlue, aes(x = typeOfTravel, y = avgLTR)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = 6))
##### classification models for Personal Travel, Blue data #####
analysisColumns1 = c("Age", "Gender", "Flight.Distance", "Eating.and.Drinking.at.Airport",
"olong", "Arrival.Delay.in.Minutes", "Loyalty", "Total.Freq.Flyer.Accts")
analysisData1 = personalBlueBinned[, names(personalBlueBinned) %in% c(analysisColumns1, "Likelihood.to.recommend")]
analysisData1 = prepareForAnalysis(analysisData1, analysisColumns1)
set.seed(1)
inTraining1 = createDataPartition(analysisData1$Likelihood.to.recommend, p = .75, list = FALSE)
trainData1 = analysisData1[inTraining1,]
testData1 = analysisData1[-inTraining1,]
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
logitBoost1 <- train(factor(Likelihood.to.recommend) ~., data = trainData1, method = "LogitBoost", trControl=fitControl, preProcess = c("center", "scale"), tuneLength = 10)
logitBoost1
result5 = predict(logitBoost1, newdata = testData1)
sum(result5 == testData1$Likelihood.to.recommend)/length(testData1$Likelihood.to.recommend)
F1_Score(testData1$Likelihood.to.recommend, result5)
sum(personalBlueBinned$Likelihood.to.recommend == "Detractor")/length(personalBlueBinned$Likelihood.to.recommend)
varImp(logitBoost1)
# The above conclusion is also true for female customers with no frequent flyer accounts.
nrow(dfBinnedData[dfBinnedData$Type.of.Travel == "Personal Travel",])/nrow(dfBinnedData)
mean(df$Likelihood.to.recommend[df$Type.of.Travel == "Personal Travel"])
mean(df$Likelihood.to.recommend)
mean(df$Likelihood.to.recommend[df$Type.of.Travel == "Personal Travel" & df$Airline.Status == "Blue"])
# The above conclusion is also true for female customers with no frequent flyer accounts.
nrow(dfBinnedData[dfBinnedData$Type.of.Travel == "Personal Travel" & df$Airline.Status == "Blue",])/nrow(dfBinnedData)
# The above conclusion is also true for female customers with no frequent flyer accounts.
nrow(dfBinnedData[dfBinnedData$Type.of.Travel == "Personal Travel" & df$Airline.Status == "Blue" & df$Gender == "Female",])/nrow(dfBinnedData)
mean(df$Likelihood.to.recommend[df$Type.of.Travel == "Personal Travel" & df$Airline.Status == "Blue" & df$Gender == "Female"])
mean(df$Likelihood.to.recommend[df$Gender == "Female"])
testData$Type.of.Travel_Personal Travel
personalTravelResult = predict(logitBoost, testData[testData$`Type.of.Travel_Personal Travel` == 1,])
str(personalTravelResult)
sum(personalTravelResult == "Detractor")
sum(personalTravelResult == "Detractor")/nrow(testData[testData$`Type.of.Travel_Personal Travel` == 1,])
F1_Score(testData1$Likelihood.to.recommend, result6)
femalePredict = predict(svmRadial1, testData1[testData1$Gender_Male == 0,])
sum(femalePredict == "Detractor")/nrow(testData1[testData1$Gender_Male == 0,])
ggplot(dfTypeOfTravel, aes(x = typeOfTravel, y = avgLTR)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
library(jsonlite)
library(rapportools)
library(tidyverse)
library(tm)
library(arules)
setwd("C:/Data/study/IST-687/Project/ist687")
df = jsonlite::fromJSON("fall2019-survey-M02.json")
plotLTR = function(data, colName) {
aggregateData = tapply(data$Likelihood.to.recommend, data[, colnames(data) == colName], mean)
aggregateDf = data.frame(temp = names(aggregateData), avgLTR = aggregateData)
ggplot(aggregateDf, aes(x = temp, y = avgLTR)) + labs(y = "Average LTR", x = colName) + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
}
########## TypeOfTravel ##########
dfTypeOfTravelTable = tapply(df$Likelihood.to.recommend, df$Type.of.Travel, mean)
dfTypeOfTravel = data.frame(typeOfTravel = names(dfTypeOfTravelTable), avgLTR = dfTypeOfTravelTable)
ggplot(dfTypeOfTravel, aes(x = typeOfTravel, y = avgLTR)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col(aes(fill(df$Likelihood.to.recommend))) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
ggplot(dfTypeOfTravel, aes(x = typeOfTravel, y = avgLTR)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col(aes(fill = df$Likelihood.to.recommend)) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
str(dfTypeOfTravel)
dfPlotData = df[, names %in% c("Type.of.Travel", "Likelyhood.to.recommend")]
dfPlotData = df[, names(df) %in% c("Type.of.Travel", "Likelyhood.to.recommend")]
dfTypeOfTravel[dfPlotData$Type.of.Travel == dfPlotData$typeOfTravel]$avgLTR
dfTypeOfTravel[dfPlotData$Type.of.Travel == dfPlotData$typeOfTravel]
dfPlotData$Type.of.Travel == dfTypeOfTravel$typeOfTravel
dfPlotData$Type.of.Travel
dfPlotData
View(dfPlotData)
names(df)
View(dfPlotData) = df[, names(df) %in% c("Type.of.Travel", "Likelihood.to.recommend")]
dfPlotData = df[, names(df) %in% c("Type.of.Travel", "Likelihood.to.recommend")]
tapply(df$Likelihood.to.recommend, df$Type.of.Travel, mean)
dfPlotData$avgLTR = tapply(df$Likelihood.to.recommend, df$Type.of.Travel, mean)
dfPlotData$Type.of.Travel == dfTypeOfTravel$typeOfTravel
dfPlotData = data.frame(typeOfTravel = df$Type.of.Travel, Likelihood.to.recommend = df$Likelihood.to.recommend, avgLTR = dfTypeOfTravel[match(df$Type.of.Travel, dfTypeOfTravel$typeOfTravel)]$avgLTR)
dfPlotData = data.frame(typeOfTravel = df$Type.of.Travel, Likelihood.to.recommend = df$Likelihood.to.recommend, avgLTR = dfTypeOfTravel[match(df$Type.of.Travel, dfTypeOfTravel$typeOfTravel),]$avgLTR)
ggplot(dfTypeOfTravel, aes(x = typeOfTravel, y = avgLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
ggplot(dfPlotData[which(order(dfPlotData$avgLTR)),], aes(x = typeOfTravel, y = avgLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
order(dfPlotData$avgLTR)
ggplot(dfPlotData[order(dfPlotData$avgLTR)),], aes(x = typeOfTravel, y = avgLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
ggplot(dfPlotData[order(dfPlotData$avgLTR),], aes(x = typeOfTravel, y = avgLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
View(dfPlotData[order(dfPlotData$avgLTR),])
ggplot(View(dfPlotData[order(dfPlotData$Likelihood.to.recommend),]), aes(x = typeOfTravel, y = avgLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
ggplot(dfPlotData[order(dfPlotData$Likelihood.to.recommend),], aes(x = typeOfTravel, y = avgLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
ggplot(dfPlotData[order(dfPlotData$Likelihood.to.recommend),], aes(x = typeOfTravel, y = avgLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend), color = "black"))
dfPlotData = dfPlotData[order(dfPlotData$Likelihood.to.recommend),]
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR)) + labs(y = "Average Rating", x = "Type of Travel") + geom_bar(position = "fill", stat = identity) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR)) + labs(y = "Average Rating", x = "Type of Travel") + geom_bar(position = "fill", stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_bar(position = "fill", stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_bar(position = "stack", stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
dfTypeOfTravelTable2 = tapply(df$Likelihood.to.recommend, df$Type.of.Travel, count)
dfTypeOfTravelTable2 = tapply(df$Likelihood.to.recommend, df$Type.of.Travel, length)
dfTypeOfTravel2 = data.frame(typeOfTravel = names(dfTypeOfTravelTable2), countLTR = dfTypeOfTravelTable2)
dfTypeOfTravel2
dfTypeOfTravelTable2
dfTypeOfTravel
dfPlotData = data.frame(typeOfTravel = df$Type.of.Travel, Likelihood.to.recommend = df$Likelihood.to.recommend, sumLTR = dfTypeOfTravel[match(df$Type.of.Travel, dfTypeOfTravel$typeOfTravel),]$sumLTR, countLTR = dfTypeOfTravel2[match(df$Type.of.Travel, dfTypeOfTravel2$typeOfTravel),]$countLTR)
dfTypeOfTravel2[match(df$Type.of.Travel, dfTypeOfTravel2$typeOfTravel),]$countLTR
########## TypeOfTravel ##########
dfTypeOfTravelTable = tapply(df$Likelihood.to.recommend, df$Type.of.Travel, sum)
dfTypeOfTravel = data.frame(typeOfTravel = names(dfTypeOfTravelTable), sumLTR = dfTypeOfTravelTable)
dfPlotData = data.frame(typeOfTravel = df$Type.of.Travel, Likelihood.to.recommend = df$Likelihood.to.recommend, sumLTR = dfTypeOfTravel[match(df$Type.of.Travel, dfTypeOfTravel$typeOfTravel),]$sumLTR, countLTR = dfTypeOfTravel2[match(df$Type.of.Travel, dfTypeOfTravel2$typeOfTravel),]$countLTR)
dfPlotData = dfPlotData[order(dfPlotData$Likelihood.to.recommend),]
ggplot(dfPlotData, aes(x = typeOfTravel, y = sumLTR/countLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_bar(position = "stack", stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
########## TypeOfTravel ##########
dfTypeOfTravelTable = tapply(df$Likelihood.to.recommend, df$Type.of.Travel, mean)
dfTypeOfTravel = data.frame(typeOfTravel = names(dfTypeOfTravelTable), avgLTR = dfTypeOfTravelTable)
dfTypeOfTravelTable2 = tapply(df$Likelihood.to.recommend, df$Type.of.Travel, length)
dfTypeOfTravel2 = data.frame(typeOfTravel = names(dfTypeOfTravelTable2), countLTR = dfTypeOfTravelTable2)
dfPlotData = data.frame(typeOfTravel = df$Type.of.Travel, Likelihood.to.recommend = df$Likelihood.to.recommend, avgLTR = dfTypeOfTravel[match(df$Type.of.Travel, dfTypeOfTravel$typeOfTravel),]$avgLTR, countLTR = dfTypeOfTravel2[match(df$Type.of.Travel, dfTypeOfTravel2$typeOfTravel),]$countLTR)
dfPlotData = dfPlotData[order(dfPlotData$Likelihood.to.recommend),]
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_bar(position = "stack", stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
dfPlotData = data.frame(typeOfTravel = df$Type.of.Travel, Likelihood.to.recommend = df %>% mutate(Likelihood.to.recommend = cut(Likelihood.to.recommend, breaks = c(min(Likelihood.to.recommend), 7, 8, max(Likelihood.to.recommend)), labels = c("Detractor", "Passive", "Promoter"), include.lowest = TRUE))$Likelihood.to.recommend, avgLTR = dfTypeOfTravel[match(df$Type.of.Travel, dfTypeOfTravel$typeOfTravel),]$avgLTR, countLTR = dfTypeOfTravel2[match(df$Type.of.Travel, dfTypeOfTravel2$typeOfTravel),]$countLTR)
dfPlotData = data.frame(typeOfTravel = df$Type.of.Travel, Likelihood.to.recommend = (df %>% mutate(Likelihood.to.recommend = cut(Likelihood.to.recommend, breaks = c(min(Likelihood.to.recommend), 7, 8, max(Likelihood.to.recommend)), labels = c("Detractor", "Passive", "Promoter"), include.lowest = TRUE)))$Likelihood.to.recommend, avgLTR = dfTypeOfTravel[match(df$Type.of.Travel, dfTypeOfTravel$typeOfTravel),]$avgLTR, countLTR = dfTypeOfTravel2[match(df$Type.of.Travel, dfTypeOfTravel2$typeOfTravel),]$countLTR)
dfPlotData = dfPlotData[order(dfPlotData$Likelihood.to.recommend),]
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_bar(position = "stack", stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
dfPlotData = dfPlotData[-order(dfPlotData$Likelihood.to.recommend),]
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_bar(position = "stack", stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
dfPlotData = dfPlotData[order(dfPlotData$Likelihood.to.recommend, decreasing = TRUE),]
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_bar(position = "stack", stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
dfPlotData = data.frame(typeOfTravel = df$Type.of.Travel, Likelihood.to.recommend = (df %>% mutate(Likelihood.to.recommend = cut(Likelihood.to.recommend, breaks = c(min(Likelihood.to.recommend), 7, 8, max(Likelihood.to.recommend)), labels = c("Detractor", "Passive", "Promoter"), include.lowest = TRUE)))$Likelihood.to.recommend, avgLTR = dfTypeOfTravel[match(df$Type.of.Travel, dfTypeOfTravel$typeOfTravel),]$avgLTR, countLTR = dfTypeOfTravel2[match(df$Type.of.Travel, dfTypeOfTravel2$typeOfTravel),]$countLTR)
dfPlotData = dfPlotData[order(dfPlotData$Likelihood.to.recommend, decreasing = TRUE),]
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_bar(position = "stack", stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
dfPlotData = data.frame(typeOfTravel = df$Type.of.Travel, Likelihood.to.recommend = (df %>% mutate(Likelihood.to.recommend = cut(Likelihood.to.recommend, breaks = c(min(Likelihood.to.recommend), 7, 8, max(Likelihood.to.recommend)), labels = c("Detractor", "Passive", "Promoter"), include.lowest = TRUE)))$Likelihood.to.recommend, avgLTR = dfTypeOfTravel[match(df$Type.of.Travel, dfTypeOfTravel$typeOfTravel),]$avgLTR, countLTR = dfTypeOfTravel2[match(df$Type.of.Travel, dfTypeOfTravel2$typeOfTravel),]$countLTR)
dfPlotData = dfPlotData[order(dfPlotData$Likelihood.to.recommend),]
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_bar(position = "stack", stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
dfPlotData = data.frame(typeOfTravel = df$Type.of.Travel, Likelihood.to.recommend = (df %>% mutate(Likelihood.to.recommend = cut(Likelihood.to.recommend, breaks = c(min(Likelihood.to.recommend), 7, 8, max(Likelihood.to.recommend)), labels = c("Detractor", "Passive", "Promoter"), include.lowest = TRUE)))$Likelihood.to.recommend, avgLTR = dfTypeOfTravel[match(df$Type.of.Travel, dfTypeOfTravel$typeOfTravel),]$avgLTR, countLTR = dfTypeOfTravel2[match(df$Type.of.Travel, dfTypeOfTravel2$typeOfTravel),]$countLTR)
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_bar(position = "stack", stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = Likelihood.to.recommend[order(Likelihood.to.recommend, decreasing = TRUE)])) + labs(y = "Average Rating", x = "Type of Travel") + geom_bar(position = "stack", stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_bar(position = "stack", stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
temp = (df %>% mutate(Likelihood.to.recommend = cut(Likelihood.to.recommend, breaks = c(min(Likelihood.to.recommend), 7, 8, max(Likelihood.to.recommend)), labels = c("Detractor", "Passive", "Promoter"), include.lowest = TRUE)))
temp$Likelihood.to.recommend[is.na(temp$Likelihood.to.recommend)] = "Passive"
dfPlotData = data.frame(typeOfTravel = df$Type.of.Travel, Likelihood.to.recommend = temp$Likelihood.to.recommend, avgLTR = dfTypeOfTravel[match(df$Type.of.Travel, dfTypeOfTravel$typeOfTravel),]$avgLTR, countLTR = dfTypeOfTravel2[match(df$Type.of.Travel, dfTypeOfTravel2$typeOfTravel),]$countLTR)
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_bar(position = "stack", stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = reorder(Likelihood.to.recommend, avgLTR))) + labs(y = "Average Rating", x = "Type of Travel") + geom_bar(position = "stack", stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
dfPlotData = dfPlotData[order(dfPlotData$Likelihood.to.recommend, decreasing = TRUE),]
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_bar(position = "stack", stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = Likelihood.to.recommend, order = avgLTR)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col(position = position_stack(reverse = TRUE)) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col(position = position_stack(reverse = TRUE)) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend))) + theme_dark()
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col(position = position_stack(reverse = TRUE)) + theme_light(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col(position = position_stack(reverse = TRUE)) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend)))
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col(position = position_stack(reverse = TRUE)) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend))) + theme_light()
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col(position = position_stack(reverse = TRUE)) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend))) + theme_minimal()
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + geom_col(position = position_stack(reverse = TRUE)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend))) + theme_minimal()
ggplot(dfPlotData, aes(x = typeOfTravel, y = avgLTR/countLTR, fill = Likelihood.to.recommend)) + labs(y = "Average Rating", x = "Type of Travel") + ggtitle("Average ratings for types of travel") + geom_col(position = position_stack(reverse = TRUE)) + geom_hline(aes(yintercept = mean(df$Likelihood.to.recommend))) + theme_minimal()
mean(df$Likelihood.to.recommend)
dfBinnedData = getBinnedData(df)
dfTnx = as(dfBinnedData, "transactions")
##### association rules #####
rulesetPromoters <- apriori(dfTnx,
parameter=list(support=0.005,confidence=0.5),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Promoter")))
length(rulesetPromoters[quality(rulesetPromoters)$lift > 2.35])
##### association rules #####
rulesetPromoters <- apriori(dfTnx,
parameter=list(support=0.005,confidence=0.5,lift=2.35),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Promoter")))
rulesetDetractors <- apriori(dfTnx,
parameter=list(support=0.05,confidence=0.8),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Detractor")))
arules::inspect(rulesetDetractors[quality(rulesetDetractors)$lift > 1.99])
length(rulesetDetractors[quality(rulesetDetractors)$lift > 1.99])
arules::inspect(rulesetPromoters[quality(rulesetPromoters)$lift > 2.35])
arules::inspect(rulesetDetractors[quality(rulesetDetractors)$lift > 1.99])
##### classification models for all data #####
analysisColumns = c("Airline.Status", "Type.of.Travel", "Eating.and.Drinking.at.Airport", "Departure.Delay.in.Minutes", "Flights.Per.Year", "Price.Sensitivity", "olong", "dlat", "Total.Freq.Flyer.Accts")
#analysisColumns = colnames(dfBinnedData)[colnames(dfBinnedData) != "Likelihood.to.recommend"]
analysisData = dfBinnedData[, names(dfBinnedData) %in% c(analysisColumns, "Likelihood.to.recommend") ]
analysisData$Likelihood.to.recommend[is.na(analysisData$Likelihood.to.recommend)] = "Passive"
analysisData = prepareForAnalysis(analysisData, analysisColumns)
##### classification models for all data #####
analysisColumns = c("Airline.Status", "Type.of.Travel", "Eating.and.Drinking.at.Airport", "Departure.Delay.in.Minutes", "Flights.Per.Year", "Price.Sensitivity", "olong", "dlat", "Total.Freq.Flyer.Accts")
analysisData = dfBinnedData[, names(dfBinnedData) %in% c(analysisColumns, "Likelihood.to.recommend") ]
analysisData$Likelihood.to.recommend[is.na(analysisData$Likelihood.to.recommend)] = "Passive"
analysisData = prepareForAnalysis(analysisData, analysisColumns)
library(fastDummies)
library(tm)
library(caret)
library(kernlab)
library(e1071)
library(arules)
library(arulesViz)
library(MLmetrics)
analysisData = dfBinnedData[, names(dfBinnedData) %in% c(analysisColumns, "Likelihood.to.recommend") ]
analysisData$Likelihood.to.recommend[is.na(analysisData$Likelihood.to.recommend)] = "Passive"
analysisData = prepareForAnalysis(analysisData, analysisColumns)
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
set.seed(1)
inTraining = createDataPartition(analysisData$Likelihood.to.recommend, p = 0.75, list = FALSE)
trainData = analysisData[inTraining,]
testData = analysisData[-inTraining,]
logitBoost <- train(factor(Likelihood.to.recommend) ~., data = trainData, method = "LogitBoost", trControl=fitControl, preProcess = c("center", "scale"), tuneLength = 10)
logitBoost
result = predict(logitBoost, testData)
sum(resultX == testData$Likelihood.to.recommend)/length(testData$Likelihood.to.recommend)
sum(result == testData$Likelihood.to.recommend)/length(testData$Likelihood.to.recommend)
result = predict(logitBoost, testData)
sum(result == testData$Likelihood.to.recommend)/length(testData$Likelihood.to.recommend)
inTraining = createDataPartition(analysisData$Likelihood.to.recommend, p = 0.75, list = FALSE)
trainData = analysisData[inTraining,]
testData = analysisData[-inTraining,]
logitBoost <- train(factor(Likelihood.to.recommend) ~., data = trainData, method = "LogitBoost", trControl=fitControl, preProcess = c("center", "scale"), tuneLength = 10)
logitBoost
plot(logitBoost)
result = predict(logitBoost, testData)
sum(result == testData$Likelihood.to.recommend)/length(testData$Likelihood.to.recommend)
F1_Score(testData$Likelihood.to.recommend, result)
varImp(logitBoost)
personalTravelResult = predict(logitBoost, testData[testData$`Type.of.Travel_Personal Travel` == 1,])
sum(personalTravelResult == "Detractor")/nrow(testData[testData$`Type.of.Travel_Personal Travel` == 1,])
personalTravel = df[str_trim(df$Type.of.Travel) == "Personal Travel", names(df) != "Type.of.Travel"]
personalTravelBinned = getBinnedData(personalTravel)
personalTravelTnx = as(personalTravelBinned, "transactions")
rulesetPromoters <- apriori(personalTravelTnx,
parameter=list(support=0.005,confidence=0.5),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Promoter")))
rulesetDetractors <- apriori(personalTravelTnx,
parameter=list(support=0.05,confidence=0.8),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Detractor")))
length(rulesetDetractors[quality(rulesetDetractors)$lift > 1.178])
# Removing unimportant data
analysisData2 = personalTravelBinned[, names(personalTravelBinned) %in% c(analysisColumns1, "Likelihood.to.recommend") ]
analysisData2 = analysisData2[analysisData2$Eating.and.Drinking.at.Airport != ">400",]
personalBlue = df[str_trim(df$Type.of.Travel) == "Personal Travel" & str_trim(df$Airline.Status) == "Blue", !names(df) %in% c("Type.of.Travel", "Airline.Status")]
personalBlueBinned = getBinnedData(personalBlue)
personalBlueTnx = as(personalBlueBinned, "transactions")
rulesetPromoters <- apriori(personalBlueTnx,
parameter=list(support=0.002,confidence=0.5),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Promoter")))
rulesetDetractors <- apriori(personalBlueTnx,
parameter=list(support=0.05,confidence=0.8),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Detractor")))
length(rulesetPromoters[quality(rulesetPromoters)$lift > 35])
length(rulesetPromoters[quality(rulesetPromoters)$lift > 28])
length(rulesetDetractors[quality(rulesetDetractors)$lift > 1.11])
##### classification models for Personal Travel, Blue data #####
analysisColumns1 = c("Age", "Gender", "Flight.Distance", "Eating.and.Drinking.at.Airport",
"olong", "Arrival.Delay.in.Minutes", "Loyalty", "Total.Freq.Flyer.Accts")
analysisData1 = personalBlueBinned[, names(personalBlueBinned) %in% c(analysisColumns1, "Likelihood.to.recommend")]
analysisData1 = prepareForAnalysis(analysisData1, analysisColumns1)
set.seed(1)
inTraining1 = createDataPartition(analysisData1$Likelihood.to.recommend, p = .75, list = FALSE)
trainData1 = analysisData1[inTraining1,]
testData1 = analysisData1[-inTraining1,]
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
logitBoost1 <- train(factor(Likelihood.to.recommend) ~., data = trainData1, method = "LogitBoost", trControl=fitControl, preProcess = c("center", "scale"), tuneLength = 10)
logitBoost1
plot(logitBoost1)
result5 = predict(logitBoost1, newdata = testData1)
sum(result5 == testData1$Likelihood.to.recommend)/length(testData1$Likelihood.to.recommend)
F1_Score(testData1$Likelihood.to.recommend, result5)
varImp(logitBoost1)
varImp(logitBoost1)
svmRadial1 <- train(factor(Likelihood.to.recommend) ~., data = trainData1, method = "svmRadial", trControl=fitControl, preProcess = c("center", "scale"), tuneLength = 10)
is.na.data.frame(df)
summary(df)
summary(df)
summary(df)
summary(df)
svmRadial1
plot(svmRadial1)
result6 = predict(svmRadial1, newdata = testData1)
sum(result6 == testData1$Likelihood.to.recommend)/length(testData1$Likelihood.to.recommend)
F1_Score(testData1$Likelihood.to.recommend, result6)
varImp(svmRadial1)
sum(personalBlueBinned$Likelihood.to.recommend == "Detractor")/length(personalBlueBinned$Likelihood.to.recommend)
femalePredict = predict(svmRadial1, testData1[testData1$Gender_Male == 0,])
sum(femalePredict == "Detractor")/nrow(testData1[testData1$Gender_Male == 0,])
View(rulesetDetractors)
inspectDT(rulesetDetractors)
inspectDT(rulesetPromoters[quality(rulesetPromoters)$lift > 2.35])
##### association rules #####
rulesetPromoters <- apriori(dfTnx,
parameter=list(support=0.005,confidence=0.5),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Promoter")))
inspectDT(rulesetPromoters[quality(rulesetPromoters)$lift > 2.35])
length(rulesetDetractors[quality(rulesetDetractors)$lift > 1.99])
rulesetDetractors <- apriori(dfTnx,
parameter=list(support=0.05,confidence=0.8),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Detractor")))
length(rulesetDetractors[quality(rulesetDetractors)$lift > 1.99])
inspectDT(rulesetDetractors[quality(rulesetDetractors)$lift > 1.99])
rulesetPromoters <- apriori(personalTravelTnx,
parameter=list(support=0.005,confidence=0.5),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Promoter")))
rulesetDetractors <- apriori(personalTravelTnx,
parameter=list(support=0.05,confidence=0.8),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Detractor")))
arules::inspect(rulesetPromoters)
inspectDT(rulesetPromoters)
inspectDT(rulesetDetractors[quality(rulesetDetractors)$lift > 1.178])
rulesetPromoters <- apriori(personalBlueTnx,
parameter=list(support=0.002,confidence=0.5),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Promoter")))
rulesetDetractors <- apriori(personalBlueTnx,
parameter=list(support=0.05,confidence=0.8),
appearance = list(default="lhs", rhs=("Likelihood.to.recommend=Detractor")))
inspectDT(rulesetPromoters[quality(rulesetPromoters)$lift > 28])
inspectDT(rulesetDetractors[quality(rulesetDetractors)$lift > 1.11])
sum(personalBlueBinned$Likelihood.to.recommend == "Detractor")/length(personalBlueBinned$Likelihood.to.recommend)
